# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class OrgUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, first_name: str=None, last_name: str=None, email: str=None, dob: date=None, privilege: int=None, user_org_id: str=None):  # noqa: E501
        """OrgUser - a model defined in Swagger

        :param id: The id of this OrgUser.  # noqa: E501
        :type id: int
        :param first_name: The first_name of this OrgUser.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this OrgUser.  # noqa: E501
        :type last_name: str
        :param email: The email of this OrgUser.  # noqa: E501
        :type email: str
        :param dob: The dob of this OrgUser.  # noqa: E501
        :type dob: date
        :param privilege: The privilege of this OrgUser.  # noqa: E501
        :type privilege: int
        :param user_org_id: The user_org_id of this OrgUser.  # noqa: E501
        :type user_org_id: str
        """
        self.swagger_types = {
            'id': int,
            'first_name': str,
            'last_name': str,
            'email': str,
            'dob': date,
            'privilege': int,
            'user_org_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'dob': 'dob',
            'privilege': 'privilege',
            'user_org_id': 'user_org_id'
        }
        self._id = id
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._dob = dob
        self._privilege = privilege
        self._user_org_id = user_org_id

    @classmethod
    def from_dict(cls, dikt) -> 'OrgUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The org_user of this OrgUser.  # noqa: E501
        :rtype: OrgUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this OrgUser.


        :return: The id of this OrgUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this OrgUser.


        :param id: The id of this OrgUser.
        :type id: int
        """

        self._id = id

    @property
    def first_name(self) -> str:
        """Gets the first_name of this OrgUser.


        :return: The first_name of this OrgUser.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this OrgUser.


        :param first_name: The first_name of this OrgUser.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this OrgUser.


        :return: The last_name of this OrgUser.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this OrgUser.


        :param last_name: The last_name of this OrgUser.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def email(self) -> str:
        """Gets the email of this OrgUser.


        :return: The email of this OrgUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this OrgUser.


        :param email: The email of this OrgUser.
        :type email: str
        """

        self._email = email

    @property
    def dob(self) -> date:
        """Gets the dob of this OrgUser.


        :return: The dob of this OrgUser.
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob: date):
        """Sets the dob of this OrgUser.


        :param dob: The dob of this OrgUser.
        :type dob: date
        """

        self._dob = dob

    @property
    def privilege(self) -> int:
        """Gets the privilege of this OrgUser.

        The privilege level within the org  # noqa: E501

        :return: The privilege of this OrgUser.
        :rtype: int
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege: int):
        """Sets the privilege of this OrgUser.

        The privilege level within the org  # noqa: E501

        :param privilege: The privilege of this OrgUser.
        :type privilege: int
        """

        self._privilege = privilege

    @property
    def user_org_id(self) -> str:
        """Gets the user_org_id of this OrgUser.

        The ID used by the user to identify himself within the org(Driver License, Passport, etc...)  # noqa: E501

        :return: The user_org_id of this OrgUser.
        :rtype: str
        """
        return self._user_org_id

    @user_org_id.setter
    def user_org_id(self, user_org_id: str):
        """Sets the user_org_id of this OrgUser.

        The ID used by the user to identify himself within the org(Driver License, Passport, etc...)  # noqa: E501

        :param user_org_id: The user_org_id of this OrgUser.
        :type user_org_id: str
        """

        self._user_org_id = user_org_id
