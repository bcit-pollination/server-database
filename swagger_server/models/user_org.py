# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.org import Org  # noqa: F401,E501
from swagger_server import util


class UserOrg(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, privilege: int=None, org: Org=None):  # noqa: E501
        """UserOrg - a model defined in Swagger

        :param privilege: The privilege of this UserOrg.  # noqa: E501
        :type privilege: int
        :param org: The org of this UserOrg.  # noqa: E501
        :type org: Org
        """
        self.swagger_types = {
            'privilege': int,
            'org': Org
        }

        self.attribute_map = {
            'privilege': 'privilege',
            'org': 'org'
        }
        self._privilege = privilege
        self._org = org

    @classmethod
    def from_dict(cls, dikt) -> 'UserOrg':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_org of this UserOrg.  # noqa: E501
        :rtype: UserOrg
        """
        return util.deserialize_model(dikt, cls)

    @property
    def privilege(self) -> int:
        """Gets the privilege of this UserOrg.

        The privilege level within the org  # noqa: E501

        :return: The privilege of this UserOrg.
        :rtype: int
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege: int):
        """Sets the privilege of this UserOrg.

        The privilege level within the org  # noqa: E501

        :param privilege: The privilege of this UserOrg.
        :type privilege: int
        """

        self._privilege = privilege

    @property
    def org(self) -> Org:
        """Gets the org of this UserOrg.


        :return: The org of this UserOrg.
        :rtype: Org
        """
        return self._org

    @org.setter
    def org(self, org: Org):
        """Sets the org of this UserOrg.


        :param org: The org of this UserOrg.
        :type org: Org
        """

        self._org = org
