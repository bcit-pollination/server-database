# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.election import Election  # noqa: F401,E501
from swagger_server.models.org import Org  # noqa: F401,E501
from swagger_server.models.question_results import QuestionResults  # noqa: F401,E501
from swagger_server.models.vote import Vote  # noqa: F401,E501
from swagger_server import util


class ElectionResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, organization: Org=None, election_info: Election=None, election_description: str=None, question_results: List[QuestionResults]=None, user_votes: List[Vote]=None):  # noqa: E501
        """ElectionResults - a model defined in Swagger

        :param organization: The organization of this ElectionResults.  # noqa: E501
        :type organization: Org
        :param election_info: The election_info of this ElectionResults.  # noqa: E501
        :type election_info: Election
        :param election_description: The election_description of this ElectionResults.  # noqa: E501
        :type election_description: str
        :param question_results: The question_results of this ElectionResults.  # noqa: E501
        :type question_results: List[QuestionResults]
        :param user_votes: The user_votes of this ElectionResults.  # noqa: E501
        :type user_votes: List[Vote]
        """
        self.swagger_types = {
            'organization': Org,
            'election_info': Election,
            'election_description': str,
            'question_results': List[QuestionResults],
            'user_votes': List[Vote]
        }

        self.attribute_map = {
            'organization': 'organization',
            'election_info': 'election_info',
            'election_description': 'election_description',
            'question_results': 'question_results',
            'user_votes': 'user_votes'
        }
        self._organization = organization
        self._election_info = election_info
        self._election_description = election_description
        self._question_results = question_results
        self._user_votes = user_votes

    @classmethod
    def from_dict(cls, dikt) -> 'ElectionResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The election_results of this ElectionResults.  # noqa: E501
        :rtype: ElectionResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization(self) -> Org:
        """Gets the organization of this ElectionResults.


        :return: The organization of this ElectionResults.
        :rtype: Org
        """
        return self._organization

    @organization.setter
    def organization(self, organization: Org):
        """Sets the organization of this ElectionResults.


        :param organization: The organization of this ElectionResults.
        :type organization: Org
        """

        self._organization = organization

    @property
    def election_info(self) -> Election:
        """Gets the election_info of this ElectionResults.


        :return: The election_info of this ElectionResults.
        :rtype: Election
        """
        return self._election_info

    @election_info.setter
    def election_info(self, election_info: Election):
        """Sets the election_info of this ElectionResults.


        :param election_info: The election_info of this ElectionResults.
        :type election_info: Election
        """

        self._election_info = election_info

    @property
    def election_description(self) -> str:
        """Gets the election_description of this ElectionResults.

        A brief description of the election  # noqa: E501

        :return: The election_description of this ElectionResults.
        :rtype: str
        """
        return self._election_description

    @election_description.setter
    def election_description(self, election_description: str):
        """Sets the election_description of this ElectionResults.

        A brief description of the election  # noqa: E501

        :param election_description: The election_description of this ElectionResults.
        :type election_description: str
        """

        self._election_description = election_description

    @property
    def question_results(self) -> List[QuestionResults]:
        """Gets the question_results of this ElectionResults.

        The results for each question posed  # noqa: E501

        :return: The question_results of this ElectionResults.
        :rtype: List[QuestionResults]
        """
        return self._question_results

    @question_results.setter
    def question_results(self, question_results: List[QuestionResults]):
        """Sets the question_results of this ElectionResults.

        The results for each question posed  # noqa: E501

        :param question_results: The question_results of this ElectionResults.
        :type question_results: List[QuestionResults]
        """

        self._question_results = question_results

    @property
    def user_votes(self) -> List[Vote]:
        """Gets the user_votes of this ElectionResults.

        The votes cast. Optional and dependant on whether the election was anonymous  # noqa: E501

        :return: The user_votes of this ElectionResults.
        :rtype: List[Vote]
        """
        return self._user_votes

    @user_votes.setter
    def user_votes(self, user_votes: List[Vote]):
        """Sets the user_votes of this ElectionResults.

        The votes cast. Optional and dependant on whether the election was anonymous  # noqa: E501

        :param user_votes: The user_votes of this ElectionResults.
        :type user_votes: List[Vote]
        """

        self._user_votes = user_votes
