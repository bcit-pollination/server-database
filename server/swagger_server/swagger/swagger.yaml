openapi: 3.0.2
info:
  title: Pollination Web Server
  description: |
    All values in this API are required and not nullable unless specifically stated.

    Org user privileges are:<br>
     0 := removed<br>
     1 := invited<br>
     2 := member<br>
     3 := admin<br>
     4 := owner
  version: "1.14"
servers:
- url: https://pollination.live/api
tags:
- name: user.auth
  description: Related to the authentication/authorization of users
- name: user
  description: A user can be a voter, and an admin or a verifier
- name: org
  description: An org aggregates users who can vote, administrate, or verify elections
- name: org.users
  description: Related to the users of an org
- name: org.elections
  description: Related to the management of org elections
- name: org.election.results
  description: Related to the access and publishing of election results
- name: org.election.votes
  description: Related to the uploading and updating of votes
- name: org.election.download
  description: Download voting machine election package
- name: elections.results.public
  description: Provide API for the general public to access election results
paths:
  /user/login:
    post:
      tags:
      - user.auth
      summary: Login user
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        "200":
          description: A token used to authenticate requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
      x-openapi-router-controller: swagger_server.controllers.user_auth_controller
  /user:
    get:
      tags:
      - user
      summary: Get user info
      operationId: get_user
      responses:
        "200":
          description: Contains the user id, info, enrolled orgs, privileges, upcoming
            elections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.user_controller
    post:
      tags:
      - user
      summary: Create user
      operationId: app_create_user
      requestBody:
        $ref: '#/components/requestBodies/new_user'
      responses:
        "200":
          description: A token used to authenticate requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Invalid syntax
        "409":
          description: Account already exists
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - user
      summary: Remove user from service. Only a user can remove himself, hence the
        user is inferred from the JWT
      operationId: remove_user
      responses:
        "200":
          description: User deleted
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/voting_token:
    get:
      tags:
      - user
      summary: Get token used to vote
      operationId: get_voting_token
      responses:
        "200":
          description: Contains the token used by the user to make a vote
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/voting_token'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /org/list:
    get:
      tags:
      - org
      summary: Get org info
      operationId: get_org_list
      responses:
        "200":
          description: Contains all the information relating to the user of the org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
  /org:
    get:
      tags:
      - org
      summary: Get org info
      operationId: get_org
      parameters:
      - name: org_id
        in: query
        description: The id of the org
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Contains all the information relating to the user of the org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_org'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
    put:
      tags:
      - org
      summary: Update org info
      operationId: update_org
      requestBody:
        $ref: '#/components/requestBodies/post_org'
      responses:
        "200":
          description: Org updated
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - owner: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
    post:
      tags:
      - org
      summary: Create org
      operationId: create_org
      requestBody:
        $ref: '#/components/requestBodies/post_org'
      responses:
        "200":
          description: Org created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
      security:
      - user: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
    delete:
      tags:
      - org
      summary: Disband org
      description: An org can only be disbanded by it's owner, hence the org is inferred
        from the JWT
      operationId: disband_org
      responses:
        "200":
          description: OK
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - owner: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
  /org/users:
    get:
      tags:
      - org.users
      summary: Fetch org users
      description: Get all users
      operationId: get_org_users
      parameters:
      - name: org_id
        in: query
        description: The id of the org
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: A list of all users in the org, together with lists of admin,
            verifier id's
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_users_controller
  /org/users/invite:
    post:
      tags:
      - org.users
      summary: Add user to org
      description: Use this to invite user to org
      operationId: org_invite_user
      requestBody:
        $ref: '#/components/requestBodies/org_user_invite'
      responses:
        "200":
          description: Users invited
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Users that could not get invited to org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_users_controller
  /org/users/invite/accept:
    get:
      tags:
      - org.users
      summary: Accept invitation user to org
      description: Use this to invite user to org
      operationId: accept_org_invite
      parameters:
      - name: encrypted_data
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Invitation accepted
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      x-openapi-router-controller: swagger_server.controllers.org_users_controller
  /org/users/delete:
    post:
      tags:
      - org.users
      summary: Remove user from org
      operationId: remove_org_user
      requestBody:
        $ref: '#/components/requestBodies/org_user'
      responses:
        "200":
          description: User kicked
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_users_controller
  /org/users/privileges:
    put:
      tags:
      - org.users
      summary: Change user privileges
      description: |
        user privileges are:<br> 0 := removed<br> 1 := invited<br> 2 := member<br> 3 := admin<br> 4 := owner
      operationId: change_user_privilege
      requestBody:
        $ref: '#/components/requestBodies/change_user_privileges'
      responses:
        "200":
          description: Privileges changed
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - owner: []
      x-openapi-router-controller: swagger_server.controllers.org_users_controller
  /org/verifier_password:
    post:
      tags:
      - org
      summary: Get password used by ID verifiers to login into voting machine
      operationId: get_verifier_password
      requestBody:
        $ref: '#/components/requestBodies/get_org'
      responses:
        "200":
          description: The password used by id verifiers to login to voting machine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifier_password'
        "400":
          description: Invalid syntax
        "401":
          description: Unauthorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_controller
  /org/elections/list:
    get:
      tags:
      - org.elections
      summary: Get election info list
      description: Get list of elections for a given org
      operationId: get_election_list
      parameters:
      - name: org_id
        in: query
        description: The id of the org
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Get a list of elections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - member: []
      x-openapi-router-controller: swagger_server.controllers.org_elections_controller
  /org/elections:
    get:
      tags:
      - org.elections
      summary: Get election info
      description: Get one election
      operationId: get_election
      parameters:
      - name: election_id
        in: query
        description: The id of the election
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Info about election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/election'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - member: []
      x-openapi-router-controller: swagger_server.controllers.org_elections_controller
    put:
      tags:
      - org.elections
      summary: update election
      description: |
        Update election.
        Elections can only be updated before they have commenced.
      operationId: update_election
      requestBody:
        $ref: '#/components/requestBodies/election'
      responses:
        "200":
          description: Election updated
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_elections_controller
    post:
      tags:
      - org.elections
      summary: Create election
      description: Create election
      operationId: create_election
      requestBody:
        $ref: '#/components/requestBodies/election'
      responses:
        "200":
          description: Election updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_elections_controller
    delete:
      tags:
      - org.elections
      summary: Delete election
      description: |
        Elections can only be deleted before they have commenced.
      operationId: delete_election
      parameters:
      - name: election_id
        in: query
        description: The id of the election
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Election deleted
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_elections_controller
  /org/elections/public/get/list:
    get:
      tags:
      - elections.results.public
      summary: Get public elections
      description: |
        Get a list of elections with results open to the public
      operationId: get_public_election_result_list
      parameters:
      - name: page
        in: query
        description: The page to get
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: elections_per_page
        in: query
        description: The page to get
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: A list of election results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security: []
      x-openapi-router-controller: swagger_server.controllers.elections_results_public_controller
  /org/elections/public/get:
    get:
      tags:
      - elections.results.public
      summary: Get public elections
      description: |
        Get a list of elections with results open to the public
      operationId: get_public_election_result
      parameters:
      - name: election_id
        in: query
        description: The id of the election to get
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: The result of an election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/election_results'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security: []
      x-openapi-router-controller: swagger_server.controllers.elections_results_public_controller
  /org/elections/results:
    get:
      tags:
      - org.election.results
      summary: Get election voting results
      description: |
        Get the voting results for an election.
        If the election is private, and the user is not a member of the org, then will respond 401: Unauthorized
        If there are several results for the same election, the latest version will be
      operationId: get_election_results
      parameters:
      - name: election_id
        in: query
        description: The id of the election
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: The result of an election
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/election_results'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - member: []
      x-openapi-router-controller: swagger_server.controllers.org_election_results_controller
  /org/election/votes:
    post:
      tags:
      - org.election.votes
      summary: Create/Update election results
      description: |
        Create/Update election results.
        Each call will add a new versioned entry for security purposes.
      operationId: upload_election_votes
      requestBody:
        $ref: '#/components/requestBodies/post_votes'
      responses:
        "200":
          description: Results added
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_election_votes_controller
  /org/election/download:
    get:
      tags:
      - org.election.download
      summary: Download main RPI election package
      description: |
        Gives the necessary information for a completely standalone voting process.
        The information included is:
          - Complete voter list, including their respective identification within the org and voting token
          - Ballot, including the election details and questions
          - List of locations
          - Verifier password
      operationId: download_voting_package
      parameters:
      - name: election_id
        in: query
        description: The id of the election
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: All of the information needed to run an offline election using
            the Pollination voting machines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
        "400":
          description: Invalid syntax
        "401":
          description: Not Authorized
        "404":
          description: Not found
      security:
      - admin: []
      x-openapi-router-controller: swagger_server.controllers.org_election_download_controller
components:
  schemas:
    user:
      required:
      - dob
      - email
      - first_name
      - last_name
      type: object
      properties:
        uid:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        dob:
          type: string
          format: date
        password:
          type: string
          description: Will be null except when creating user
      description: A user. user can be voters, and admins or verifiers
      example:
        uid: 0
        password: password
        dob: 2000-01-23
        last_name: last_name
        first_name: first_name
        email: email
    voting_token:
      required:
      - voting_token
      type: object
      properties:
        voting_token:
          type: string
      description: Token to be passed to the RPI at the time of voting
      example:
        voting_token: voting_token
    voting_user:
      type: object
      description: Describes the information needed for a user to vote
      allOf:
      - $ref: '#/components/schemas/voting_token'
      - required:
        - user_org_id
        type: object
        properties:
          user_org_id:
            type: string
            description: The ID of the user within the organization (School id, Driver
              License, etc...)
    org:
      required:
      - name
      type: object
      properties:
        org_id:
          type: integer
          description: A unique identifier
          format: int64
        name:
          type: string
          description: The name of the org
      description: An organization
      example:
        org_id: 6
        name: name
    verifier_password:
      required:
      - verifier_password
      type: object
      properties:
        verifier_password:
          type: string
      description: The password used by verifiers to login into voting machines
      example:
        verifier_password: verifier_password
    org_user_invite:
      required:
      - email
      - user_org_id
      type: object
      properties:
        email:
          type: string
          format: email
        user_org_id:
          type: string
          description: The id of the user within the organization
      description: The info needed to invite a user
    election:
      required:
      - anonymous
      - election_description
      - end_time
      - org_id
      - public_results
      - questions
      - start_time
      - verified
      type: object
      properties:
        election_description:
          type: string
          description: A text describing the purpose of the election
        election_id:
          type: integer
        org_id:
          type: integer
          description: The id of the organization holding the election
        start_time:
          type: string
          description: The time and date that an election will be open for polling
          format: date-time
        end_time:
          type: string
          description: The time and date that an election will be closed for polling
          format: date-time
        anonymous:
          type: boolean
          description: Whether this election is anonymous. True for anonymous, else
            non-anonymous
        verified:
          type: boolean
          description: Whether it is required for voters to verify their ID's in order
            to vote
        public_results:
          type: boolean
          description: Whether the results of the election are open to the general
            public, or just within the org
        questions:
          type: array
          items:
            $ref: '#/components/schemas/question'
      description: |
        Models an election.
        The election has voter list, id verifiers, voting stations, and locations associated with it.
        Elections can be anonymous or non-anonymous
        The election has a predetermined window of time during which it is active. Before the active window begins, the election can be edited. However, it cannot be edited once it has begun.

        Times must be provided in UTC.
      example:
        start_time: 2000-01-23T04:56:07.000+00:00
        org_id: 6
        election_id: 0
        end_time: 2000-01-23T04:56:07.000+00:00
        verified: true
        public_results: true
        questions:
        - question_description: question_description
          election_id: 5
          options:
          - option_description: option_description
            option_id: 2
          - option_description: option_description
            option_id: 2
          question_id: 1
          max_selection_count: 5
        - question_description: question_description
          election_id: 5
          options:
          - option_description: option_description
            option_id: 2
          - option_description: option_description
            option_id: 2
          question_id: 1
          max_selection_count: 5
        anonymous: true
        election_description: election_description
    user_org:
      required:
      - org
      - privilege
      - user_org_id
      type: object
      properties:
        privilege:
          type: integer
          description: The privilege level within the org
        user_org_id:
          type: string
          description: The ID used by the user to identify himself within the org(Driver
            License, Passport, etc...)
        org:
          $ref: '#/components/schemas/org'
      description: An org the user belongs to, toghether with pertinent user info
      example:
        user_org_id: user_org_id
        org:
          org_id: 6
          name: name
        privilege: 0
    org_user:
      type: object
      description: A user that belongs to an org
      allOf:
      - $ref: '#/components/schemas/user'
      - required:
        - privilege
        - user_org_id
        type: object
        properties:
          privilege:
            type: integer
            description: The privilege level within the org
          user_org_id:
            type: string
            description: The ID used by the user to identify himself within the org(Driver
              License, Passport, etc...)
    option:
      required:
      - option_description
      type: object
      properties:
        option_id:
          type: integer
        option_description:
          type: string
          description: The text describing a posible selection to be made
      description: An option given for a question
      example:
        option_description: option_description
        option_id: 2
    question:
      required:
      - max_selection_count
      - question_description
      type: object
      properties:
        question_id:
          type: integer
        question_description:
          type: string
          description: The text of the question posed
        election_id:
          type: integer
          description: The id of the parent election
        max_selection_count:
          type: integer
          description: How many of the given question options can the user select.
            Must be >= 1
        options:
          type: array
          description: The options given
          items:
            $ref: '#/components/schemas/option'
      description: An election question
      example:
        question_description: question_description
        election_id: 5
        options:
        - option_description: option_description
          option_id: 2
        - option_description: option_description
          option_id: 2
        question_id: 1
        max_selection_count: 5
    choice:
      required:
      - option_id
      - question_id
      type: object
      properties:
        question_id:
          type: integer
          description: The id of the question
        option_id:
          type: integer
          description: The id of the option chosen by the user
      description: A vote choice
    vote:
      required:
      - choices
      - time_stamp
      - voting_token
      type: object
      properties:
        voter_first_name:
          type: string
          description: OPTIONAL. The first name of the voter
        voter_last_name:
          type: string
          description: OPTIONAL. The last name of the voter
        voting_token:
          type: string
          description: The token used by a user to cast the vote
        choices:
          type: array
          description: The choices made by the voter
          items:
            $ref: '#/components/schemas/choice'
        time_stamp:
          type: string
          description: The time at which the vote was cast
          format: date-time
        location:
          type: string
          description: The id of the location where the vote was cast
      description: |
        A vote cast.
        If the election is anonymous, first_name and last_name will be null. Else, they are required.
    option_results:
      type: object
      description: The voting result for this option
      allOf:
      - $ref: '#/components/schemas/option'
      - required:
        - total_votes_for
        - vote_proportion_percent
        type: object
        properties:
          total_votes_for:
            type: number
            description: The total number of votes cast for this option. A float
          vote_proportion_percent:
            type: number
            description: The voting proportion for this option, in percents. A float
    question_results:
      required:
      - options_posed
      type: object
      properties:
        options_posed:
          type: array
          description: The options given for this question
          items:
            $ref: '#/components/schemas/option_results'
      description: The voting results for this question
    private_election_results:
      required:
      - question_results
      type: object
      properties:
        question_results:
          type: array
          description: The results for each question posed
          items:
            $ref: '#/components/schemas/question_results'
        user_votes:
          type: array
          description: The votes cast. Optional and dependant on whether the election
            was anonymous
          items:
            $ref: '#/components/schemas/vote'
      description: |
        The results of an election.
        Organization property is optional is provided for public requests purposes
    election_results:
      type: object
      description: |
        The results of an election.
        Organization property is optional is provided for public requests purposes
      allOf:
      - $ref: '#/components/schemas/private_election_results'
      - required:
        - election_info
        - org_info
        type: object
        properties:
          org_info:
            $ref: '#/components/schemas/org'
          election_info:
            $ref: '#/components/schemas/election'
    new_org:
      type: object
      allOf:
      - $ref: '#/components/schemas/org'
      - type: object
        properties:
          user_org_id:
            type: string
            description: The id of the user within the organization (driver license,
              passport number, etc...)
          verifier_password:
            type: string
            description: The Password used by id verifiers to log in to RPI
    inline_response_200:
      type: object
      properties:
        jwt_token:
          type: string
          description: Authentication token for new user
      additionalProperties: false
      example:
        jwt_token: jwt_token
    inline_response_200_1:
      type: object
      properties:
        orgs:
          type: array
          description: A list of all the orgs the user belongs to
          items:
            $ref: '#/components/schemas/user_org'
      additionalProperties: false
      example:
        orgs:
        - user_org_id: user_org_id
          org:
            org_id: 6
            name: name
          privilege: 0
        - user_org_id: user_org_id
          org:
            org_id: 6
            name: name
          privilege: 0
    inline_response_200_2:
      type: object
      properties:
        org_id:
          type: integer
          description: The id of the implied org
      additionalProperties: false
      example:
        org_id: 0
    inline_response_200_3:
      type: object
      properties:
        users:
          type: array
          description: An array of all users subscribed to vote
          items:
            $ref: '#/components/schemas/org_user'
      additionalProperties: false
      example:
        users:
        - ""
        - ""
    inline_response_404:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/org_user_invite'
      additionalProperties: false
    inline_response_200_4:
      type: object
      properties:
        elections:
          type: array
          items:
            $ref: '#/components/schemas/election'
      additionalProperties: false
      example:
        elections:
        - start_time: 2000-01-23T04:56:07.000+00:00
          org_id: 6
          election_id: 0
          end_time: 2000-01-23T04:56:07.000+00:00
          verified: true
          public_results: true
          questions:
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          anonymous: true
          election_description: election_description
        - start_time: 2000-01-23T04:56:07.000+00:00
          org_id: 6
          election_id: 0
          end_time: 2000-01-23T04:56:07.000+00:00
          verified: true
          public_results: true
          questions:
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          anonymous: true
          election_description: election_description
    inline_response_200_5:
      type: object
      properties:
        election_id:
          type: integer
          description: The id of the election just created
      additionalProperties: false
      example:
        election_id: 0
    inline_response_200_6:
      type: object
      properties:
        elections:
          type: array
          items:
            $ref: '#/components/schemas/election_results'
      additionalProperties: false
      example:
        elections:
        - ""
        - ""
    inline_response_200_7:
      type: object
      properties:
        verifier_password:
          type: string
          description: |
            OPTIONAL. The password used by id verifiers to access the voting machine.

            This will be present if the election is verified
        voter_list:
          type: array
          description: |
            The complete voter list. includes::
            - First name - Last name - Organization id(if verified election) - voting_token
          items:
            $ref: '#/components/schemas/voting_user'
        election_info:
          $ref: '#/components/schemas/election'
      additionalProperties: false
      example:
        verifier_password: verifier_password
        election_info:
          start_time: 2000-01-23T04:56:07.000+00:00
          org_id: 6
          election_id: 0
          end_time: 2000-01-23T04:56:07.000+00:00
          verified: true
          public_results: true
          questions:
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          - question_description: question_description
            election_id: 5
            options:
            - option_description: option_description
              option_id: 2
            - option_description: option_description
              option_id: 2
            question_id: 1
            max_selection_count: 5
          anonymous: true
          election_description: election_description
        voter_list:
        - ""
        - ""
  responses:
    default:
      description: Unhandled error
    "400":
      description: Invalid syntax
    "401":
      description: Not Authorized
    "404":
      description: Not found
    jwt:
      description: A token used to authenticate requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
    user:
      description: Contains the user id, info, enrolled orgs, privileges, upcoming
        elections
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    bad_users:
      description: Users that could not get invited to org
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_404'
    voting_token:
      description: Contains the token used by the user to make a vote
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/voting_token'
    org_list:
      description: Contains all the information relating to the user of the org
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_1'
    org:
      description: Contains all the information relating to the user of the org
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user_org'
    org_users:
      description: A list of all users in the org, together with lists of admin, verifier
        id's
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_3'
    election:
      description: Info about election
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/election'
    election_list:
      description: Get a list of elections
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_4'
    verifier_password:
      description: The password used by id verifiers to login to voting machine
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/verifier_password'
    election_results:
      description: The result of an election
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/election_results'
    election_result_list:
      description: A list of election results
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_6'
    election_package:
      description: All of the information needed to run an offline election using
        the Pollination voting machines
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_7'
  parameters:
    org_p:
      name: org_id
      in: query
      description: The id of the org
      required: true
      style: form
      explode: true
      schema:
        type: integer
    election_p:
      name: election_id
      in: query
      description: The id of the election
      required: true
      style: form
      explode: true
      schema:
        type: integer
  requestBodies:
    login:
      content:
        application/json:
          schema:
            required:
            - email
            - password
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            additionalProperties: false
      required: true
    new_user:
      description: New user info to be added.
      content:
        application/json:
          schema:
            required:
            - dob
            - email
            - first_name
            - last_name
            - password
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              email:
                type: string
              dob:
                type: string
                format: date
              password:
                type: string
            additionalProperties: false
      required: true
    user:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
      required: true
    org_user:
      content:
        application/json:
          schema:
            required:
            - org_id
            - uid
            type: object
            properties:
              org_id:
                type: integer
                description: The id of the org to add the user to
              uid:
                type: integer
                description: The id of the user to add
            additionalProperties: false
      required: true
    org_user_invite:
      description: A list of info for users to be invited
      content:
        application/json:
          schema:
            required:
            - invites
            - org_id
            type: object
            properties:
              org_id:
                type: integer
                description: The id of the org to get
              invites:
                type: array
                items:
                  $ref: '#/components/schemas/org_user_invite'
            additionalProperties: false
      required: true
    get_org:
      content:
        application/json:
          schema:
            required:
            - org_id
            type: object
            properties:
              org_id:
                type: integer
                description: The id of the org to get
            additionalProperties: false
      required: true
    post_org:
      description: Org id is optional when creating org, else required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/new_org'
      required: true
    org:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/org'
      required: true
    remove_user:
      description: Information about user to be kicked
      content:
        application/json:
          schema:
            required:
            - org_id
            - uid
            type: object
            properties:
              uid:
                type: integer
                description: user id of user to be kicked
              org_id:
                type: integer
                description: The id of the org in which to change the privileges
            additionalProperties: false
      required: true
    change_user_privileges:
      description: Information about the user to have the privileges changed
      content:
        application/json:
          schema:
            required:
            - org_id
            - privilege
            - uid
            type: object
            properties:
              uid:
                type: integer
                description: user id of the user to changed
              privilege:
                type: integer
                description: the new privileges for the user
              org_id:
                type: integer
                description: The id of the org in which to change the privileges
            additionalProperties: false
      required: true
    election:
      description: Election ID is not required to POST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/election'
      required: true
    post_votes:
      content:
        application/json:
          schema:
            required:
            - votes_cast
            type: object
            properties:
              election_id:
                type: integer
              votes_cast:
                type: array
                items:
                  $ref: '#/components/schemas/vote'
            additionalProperties: false
      required: true
    get_election_results:
      content:
        application/json:
          schema:
            required:
            - election_id
            type: object
            properties:
              election_id:
                type: integer
                description: The id of the election of interest
            additionalProperties: false
      required: true
    get_election_voting_package:
      content:
        application/json:
          schema:
            required:
            - election_id
            type: object
            properties:
              election_id:
                type: integer
                description: The ID of the election for which to get the voting package
            additionalProperties: false
      required: true
  securitySchemes:
    user:
      type: http
      description: Enforces access to endpoints available to all users
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_user
    member:
      type: http
      description: Enforces access to endpoints available to org members
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_member
    admin:
      type: http
      description: Enforces access to endpoints available to owners and admins
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_admin
    owner:
      type: http
      description: Enforces access to endpoints available to org owners
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_owner

