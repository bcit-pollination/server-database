# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.choice import Choice  # noqa: F401,E501
from swagger_server import util


class Vote(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, voter_first_name: str=None, voter_last_name: str=None, voting_token: str=None, choices: List[Choice]=None, time_stamp: datetime=None, location: str=None):  # noqa: E501
        """Vote - a model defined in Swagger

        :param voter_first_name: The voter_first_name of this Vote.  # noqa: E501
        :type voter_first_name: str
        :param voter_last_name: The voter_last_name of this Vote.  # noqa: E501
        :type voter_last_name: str
        :param voting_token: The voting_token of this Vote.  # noqa: E501
        :type voting_token: str
        :param choices: The choices of this Vote.  # noqa: E501
        :type choices: List[Choice]
        :param time_stamp: The time_stamp of this Vote.  # noqa: E501
        :type time_stamp: datetime
        :param location: The location of this Vote.  # noqa: E501
        :type location: str
        """
        self.swagger_types = {
            'voter_first_name': str,
            'voter_last_name': str,
            'voting_token': str,
            'choices': List[Choice],
            'time_stamp': datetime,
            'location': str
        }

        self.attribute_map = {
            'voter_first_name': 'voter_first_name',
            'voter_last_name': 'voter_last_name',
            'voting_token': 'voting_token',
            'choices': 'choices',
            'time_stamp': 'time_stamp',
            'location': 'location'
        }
        self._voter_first_name = voter_first_name
        self._voter_last_name = voter_last_name
        self._voting_token = voting_token
        self._choices = choices
        self._time_stamp = time_stamp
        self._location = location

    @classmethod
    def from_dict(cls, dikt) -> 'Vote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The vote of this Vote.  # noqa: E501
        :rtype: Vote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def voter_first_name(self) -> str:
        """Gets the voter_first_name of this Vote.

        OPTIONAL. The first name of the voter  # noqa: E501

        :return: The voter_first_name of this Vote.
        :rtype: str
        """
        return self._voter_first_name

    @voter_first_name.setter
    def voter_first_name(self, voter_first_name: str):
        """Sets the voter_first_name of this Vote.

        OPTIONAL. The first name of the voter  # noqa: E501

        :param voter_first_name: The voter_first_name of this Vote.
        :type voter_first_name: str
        """

        self._voter_first_name = voter_first_name

    @property
    def voter_last_name(self) -> str:
        """Gets the voter_last_name of this Vote.

        OPTIONAL. The last name of the voter  # noqa: E501

        :return: The voter_last_name of this Vote.
        :rtype: str
        """
        return self._voter_last_name

    @voter_last_name.setter
    def voter_last_name(self, voter_last_name: str):
        """Sets the voter_last_name of this Vote.

        OPTIONAL. The last name of the voter  # noqa: E501

        :param voter_last_name: The voter_last_name of this Vote.
        :type voter_last_name: str
        """

        self._voter_last_name = voter_last_name

    @property
    def voting_token(self) -> str:
        """Gets the voting_token of this Vote.

        The token used by a user to cast the vote  # noqa: E501

        :return: The voting_token of this Vote.
        :rtype: str
        """
        return self._voting_token

    @voting_token.setter
    def voting_token(self, voting_token: str):
        """Sets the voting_token of this Vote.

        The token used by a user to cast the vote  # noqa: E501

        :param voting_token: The voting_token of this Vote.
        :type voting_token: str
        """
        if voting_token is None:
            raise ValueError("Invalid value for `voting_token`, must not be `None`")  # noqa: E501

        self._voting_token = voting_token

    @property
    def choices(self) -> List[Choice]:
        """Gets the choices of this Vote.

        The choices made by the voter  # noqa: E501

        :return: The choices of this Vote.
        :rtype: List[Choice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[Choice]):
        """Sets the choices of this Vote.

        The choices made by the voter  # noqa: E501

        :param choices: The choices of this Vote.
        :type choices: List[Choice]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")  # noqa: E501

        self._choices = choices

    @property
    def time_stamp(self) -> datetime:
        """Gets the time_stamp of this Vote.

        The time at which the vote was cast  # noqa: E501

        :return: The time_stamp of this Vote.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp: datetime):
        """Sets the time_stamp of this Vote.

        The time at which the vote was cast  # noqa: E501

        :param time_stamp: The time_stamp of this Vote.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")  # noqa: E501

        self._time_stamp = time_stamp

    @property
    def location(self) -> str:
        """Gets the location of this Vote.

        The id of the location where the vote was cast  # noqa: E501

        :return: The location of this Vote.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Vote.

        The id of the location where the vote was cast  # noqa: E501

        :param location: The location of this Vote.
        :type location: str
        """

        self._location = location
