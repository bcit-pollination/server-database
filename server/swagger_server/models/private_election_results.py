# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.question_results import QuestionResults  # noqa: F401,E501
from swagger_server import util


class PrivateElectionResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, question_results: List[QuestionResults]=None):  # noqa: E501
        """PrivateElectionResults - a model defined in Swagger

        :param question_results: The question_results of this PrivateElectionResults.  # noqa: E501
        :type question_results: List[QuestionResults]
        """
        self.swagger_types = {
            'question_results': List[QuestionResults]
        }

        self.attribute_map = {
            'question_results': 'question_results'
        }
        self._question_results = question_results

    @classmethod
    def from_dict(cls, dikt) -> 'PrivateElectionResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The private_election_results of this PrivateElectionResults.  # noqa: E501
        :rtype: PrivateElectionResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_results(self) -> List[QuestionResults]:
        """Gets the question_results of this PrivateElectionResults.

        The results for each question posed  # noqa: E501

        :return: The question_results of this PrivateElectionResults.
        :rtype: List[QuestionResults]
        """
        return self._question_results

    @question_results.setter
    def question_results(self, question_results: List[QuestionResults]):
        """Sets the question_results of this PrivateElectionResults.

        The results for each question posed  # noqa: E501

        :param question_results: The question_results of this PrivateElectionResults.
        :type question_results: List[QuestionResults]
        """
        if question_results is None:
            raise ValueError("Invalid value for `question_results`, must not be `None`")  # noqa: E501

        self._question_results = question_results
