# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.question import Question  # noqa: F401,E501
from swagger_server import util


class Election(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, election_id: int=None, org_id: int=None, start_time: datetime=None, end_time: datetime=None, anonymous: bool=None, verified: bool=None, public_results: bool=None, questions: List[Question]=None):  # noqa: E501
        """Election - a model defined in Swagger

        :param election_id: The election_id of this Election.  # noqa: E501
        :type election_id: int
        :param org_id: The org_id of this Election.  # noqa: E501
        :type org_id: int
        :param start_time: The start_time of this Election.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this Election.  # noqa: E501
        :type end_time: datetime
        :param anonymous: The anonymous of this Election.  # noqa: E501
        :type anonymous: bool
        :param verified: The verified of this Election.  # noqa: E501
        :type verified: bool
        :param public_results: The public_results of this Election.  # noqa: E501
        :type public_results: bool
        :param questions: The questions of this Election.  # noqa: E501
        :type questions: List[Question]
        """
        self.swagger_types = {
            'election_id': int,
            'org_id': int,
            'start_time': datetime,
            'end_time': datetime,
            'anonymous': bool,
            'verified': bool,
            'public_results': bool,
            'questions': List[Question]
        }

        self.attribute_map = {
            'election_id': 'election_id',
            'org_id': 'org_id',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'anonymous': 'anonymous',
            'verified': 'verified',
            'public_results': 'public_results',
            'questions': 'questions'
        }
        self._election_id = election_id
        self._org_id = org_id
        self._start_time = start_time
        self._end_time = end_time
        self._anonymous = anonymous
        self._verified = verified
        self._public_results = public_results
        self._questions = questions

    @classmethod
    def from_dict(cls, dikt) -> 'Election':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The election of this Election.  # noqa: E501
        :rtype: Election
        """
        return util.deserialize_model(dikt, cls)

    @property
    def election_id(self) -> int:
        """Gets the election_id of this Election.


        :return: The election_id of this Election.
        :rtype: int
        """
        return self._election_id

    @election_id.setter
    def election_id(self, election_id: int):
        """Sets the election_id of this Election.


        :param election_id: The election_id of this Election.
        :type election_id: int
        """

        self._election_id = election_id

    @property
    def org_id(self) -> int:
        """Gets the org_id of this Election.

        The id of the organization holding the election  # noqa: E501

        :return: The org_id of this Election.
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: int):
        """Sets the org_id of this Election.

        The id of the organization holding the election  # noqa: E501

        :param org_id: The org_id of this Election.
        :type org_id: int
        """

        self._org_id = org_id

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this Election.

        The time and date that an election will be open for polling  # noqa: E501

        :return: The start_time of this Election.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this Election.

        The time and date that an election will be open for polling  # noqa: E501

        :param start_time: The start_time of this Election.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this Election.

        The time and date that an election will be closed for polling  # noqa: E501

        :return: The end_time of this Election.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this Election.

        The time and date that an election will be closed for polling  # noqa: E501

        :param end_time: The end_time of this Election.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def anonymous(self) -> bool:
        """Gets the anonymous of this Election.

        Whether this election is anonymous. True for anonymous, else non-anonymous  # noqa: E501

        :return: The anonymous of this Election.
        :rtype: bool
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous: bool):
        """Sets the anonymous of this Election.

        Whether this election is anonymous. True for anonymous, else non-anonymous  # noqa: E501

        :param anonymous: The anonymous of this Election.
        :type anonymous: bool
        """

        self._anonymous = anonymous

    @property
    def verified(self) -> bool:
        """Gets the verified of this Election.

        Whether it is required for voters to verify their ID's in order to vote  # noqa: E501

        :return: The verified of this Election.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """Sets the verified of this Election.

        Whether it is required for voters to verify their ID's in order to vote  # noqa: E501

        :param verified: The verified of this Election.
        :type verified: bool
        """

        self._verified = verified

    @property
    def public_results(self) -> bool:
        """Gets the public_results of this Election.

        Whether the results of the election are open to the general public, or just within the org  # noqa: E501

        :return: The public_results of this Election.
        :rtype: bool
        """
        return self._public_results

    @public_results.setter
    def public_results(self, public_results: bool):
        """Sets the public_results of this Election.

        Whether the results of the election are open to the general public, or just within the org  # noqa: E501

        :param public_results: The public_results of this Election.
        :type public_results: bool
        """

        self._public_results = public_results

    @property
    def questions(self) -> List[Question]:
        """Gets the questions of this Election.


        :return: The questions of this Election.
        :rtype: List[Question]
        """
        return self._questions

    @questions.setter
    def questions(self, questions: List[Question]):
        """Sets the questions of this Election.


        :param questions: The questions of this Election.
        :type questions: List[Question]
        """

        self._questions = questions
