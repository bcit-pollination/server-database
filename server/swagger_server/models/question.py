# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, question_id: int=None, question_description: str=None, election_id: int=None, min_selection_count: int=None, max_selection_count: int=None, ordered_choices: bool=None, options: List=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param question_id: The question_id of this Question.  # noqa: E501
        :type question_id: int
        :param question_description: The question_description of this Question.  # noqa: E501
        :type question_description: str
        :param election_id: The election_id of this Question.  # noqa: E501
        :type election_id: int
        :param min_selection_count: The min_selection_count of this Question.  # noqa: E501
        :type min_selection_count: int
        :param max_selection_count: The max_selection_count of this Question.  # noqa: E501
        :type max_selection_count: int
        :param ordered_choices: The ordered_choices of this Question.  # noqa: E501
        :type ordered_choices: bool
        :param options: The options of this Question.  # noqa: E501
        :type options: List
        """
        self.swagger_types = {
            'question_id': int,
            'question_description': str,
            'election_id': int,
            'min_selection_count': int,
            'max_selection_count': int,
            'ordered_choices': bool,
            'options': List
        }

        self.attribute_map = {
            'question_id': 'question_id',
            'question_description': 'question_description',
            'election_id': 'election_id',
            'min_selection_count': 'min_selection_count',
            'max_selection_count': 'max_selection_count',
            'ordered_choices': 'ordered_choices',
            'options': 'options'
        }
        self._question_id = question_id
        self._question_description = question_description
        self._election_id = election_id
        self._min_selection_count = min_selection_count
        self._max_selection_count = max_selection_count
        self._ordered_choices = ordered_choices
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self) -> int:
        """Gets the question_id of this Question.


        :return: The question_id of this Question.
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id: int):
        """Sets the question_id of this Question.


        :param question_id: The question_id of this Question.
        :type question_id: int
        """

        self._question_id = question_id

    @property
    def question_description(self) -> str:
        """Gets the question_description of this Question.

        The text of the question posed  # noqa: E501

        :return: The question_description of this Question.
        :rtype: str
        """
        return self._question_description

    @question_description.setter
    def question_description(self, question_description: str):
        """Sets the question_description of this Question.

        The text of the question posed  # noqa: E501

        :param question_description: The question_description of this Question.
        :type question_description: str
        """
        if question_description is None:
            raise ValueError("Invalid value for `question_description`, must not be `None`")  # noqa: E501

        self._question_description = question_description

    @property
    def election_id(self) -> int:
        """Gets the election_id of this Question.

        The id of the parent election  # noqa: E501

        :return: The election_id of this Question.
        :rtype: int
        """
        return self._election_id

    @election_id.setter
    def election_id(self, election_id: int):
        """Sets the election_id of this Question.

        The id of the parent election  # noqa: E501

        :param election_id: The election_id of this Question.
        :type election_id: int
        """

        self._election_id = election_id

    @property
    def min_selection_count(self) -> int:
        """Gets the min_selection_count of this Question.

        The minimun amount of options a user must select  # noqa: E501

        :return: The min_selection_count of this Question.
        :rtype: int
        """
        return self._min_selection_count

    @min_selection_count.setter
    def min_selection_count(self, min_selection_count: int):
        """Sets the min_selection_count of this Question.

        The minimun amount of options a user must select  # noqa: E501

        :param min_selection_count: The min_selection_count of this Question.
        :type min_selection_count: int
        """
        if min_selection_count is None:
            raise ValueError("Invalid value for `min_selection_count`, must not be `None`")  # noqa: E501

        self._min_selection_count = min_selection_count

    @property
    def max_selection_count(self) -> int:
        """Gets the max_selection_count of this Question.

        How many of the given question options can the user select. Must be >= 1  # noqa: E501

        :return: The max_selection_count of this Question.
        :rtype: int
        """
        return self._max_selection_count

    @max_selection_count.setter
    def max_selection_count(self, max_selection_count: int):
        """Sets the max_selection_count of this Question.

        How many of the given question options can the user select. Must be >= 1  # noqa: E501

        :param max_selection_count: The max_selection_count of this Question.
        :type max_selection_count: int
        """
        if max_selection_count is None:
            raise ValueError("Invalid value for `max_selection_count`, must not be `None`")  # noqa: E501

        self._max_selection_count = max_selection_count

    @property
    def ordered_choices(self) -> bool:
        """Gets the ordered_choices of this Question.

        True if the choices made in this question are ordered  # noqa: E501

        :return: The ordered_choices of this Question.
        :rtype: bool
        """
        return self._ordered_choices

    @ordered_choices.setter
    def ordered_choices(self, ordered_choices: bool):
        """Sets the ordered_choices of this Question.

        True if the choices made in this question are ordered  # noqa: E501

        :param ordered_choices: The ordered_choices of this Question.
        :type ordered_choices: bool
        """
        if ordered_choices is None:
            raise ValueError("Invalid value for `ordered_choices`, must not be `None`")  # noqa: E501

        self._ordered_choices = ordered_choices

    @property
    def options(self) -> List:
        """Gets the options of this Question.

        The options given  # noqa: E501

        :return: The options of this Question.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options: List):
        """Sets the options of this Question.

        The options given  # noqa: E501

        :param options: The options of this Question.
        :type options: List
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options
