# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.option import Option  # noqa: F401,E501
from swagger_server import util


class OptionResults(Option):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, option_id: int=None, option_description: str=None, total_votes_for: float=None, result: float=None):  # noqa: E501
        """OptionResults - a model defined in Swagger

        :param option_id: The option_id of this OptionResults.  # noqa: E501
        :type option_id: int
        :param option_description: The option_description of this OptionResults.  # noqa: E501
        :type option_description: str
        :param total_votes_for: The total_votes_for of this OptionResults.  # noqa: E501
        :type total_votes_for: float
        :param result: The vote_proportion_percent of this OptionResults.  # noqa: E501
        :type result: float
        """
        Option.__init__(self, option_id, option_description )
        self.swagger_types = {
            'option_id': int,
            'option_description': str,
            'total_votes_for': float,
            'result': float
        }

        self.attribute_map = {
            'option_id': 'option_id',
            'option_description': 'option_description',
            'total_votes_for': 'total_votes_for',
            'result': 'result'
        }
        self._total_votes_for = total_votes_for
        self.result = result

    @classmethod
    def from_dict(cls, dikt) -> 'OptionResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The option_results of this OptionResults.  # noqa: E501
        :rtype: OptionResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_votes_for(self) -> float:
        """Gets the total_votes_for of this OptionResults.

        The total number of votes cast for this option. A float  # noqa: E501

        :return: The total_votes_for of this OptionResults.
        :rtype: float
        """
        return self._total_votes_for

    @total_votes_for.setter
    def total_votes_for(self, total_votes_for: float):
        """Sets the total_votes_for of this OptionResults.

        The total number of votes cast for this option. A float  # noqa: E501

        :param total_votes_for: The total_votes_for of this OptionResults.
        :type total_votes_for: float
        """
        if total_votes_for is None:
            raise ValueError("Invalid value for `total_votes_for`, must not be `None`")  # noqa: E501

        self._total_votes_for = total_votes_for

    @property
    def vote_proportion_percent(self) -> float:
        """Gets the vote_proportion_percent of this OptionResults.

        The voting proportion for this option, in percents. A float  # noqa: E501

        :return: The vote_proportion_percent of this OptionResults.
        :rtype: float
        """
        return self._vote_proportion_percent

    @vote_proportion_percent.setter
    def vote_proportion_percent(self, vote_proportion_percent: float):
        """Sets the vote_proportion_percent of this OptionResults.

        The voting proportion for this option, in percents. A float  # noqa: E501

        :param vote_proportion_percent: The vote_proportion_percent of this OptionResults.
        :type vote_proportion_percent: float
        """
        if vote_proportion_percent is None:
            raise ValueError("Invalid value for `vote_proportion_percent`, must not be `None`")  # noqa: E501

        self._vote_proportion_percent = vote_proportion_percent
