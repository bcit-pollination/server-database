# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, street_address=None, city=None, postal_code=None, province=None, country=None):  # noqa: E501
        """Location - a model defined in OpenAPI

        :param id: The id of this Location.  # noqa: E501
        :type id: int
        :param street_address: The street_address of this Location.  # noqa: E501
        :type street_address: str
        :param city: The city of this Location.  # noqa: E501
        :type city: str
        :param postal_code: The postal_code of this Location.  # noqa: E501
        :type postal_code: str
        :param province: The province of this Location.  # noqa: E501
        :type province: str
        :param country: The country of this Location.  # noqa: E501
        :type country: str
        """
        self.openapi_types = {
            'id': int,
            'street_address': str,
            'city': str,
            'postal_code': str,
            'province': str,
            'country': str
        }

        self.attribute_map = {
            'id': 'id',
            'street_address': 'streetAddress',
            'city': 'city',
            'postal_code': 'postal_code',
            'province': 'province',
            'country': 'country'
        }

        self._id = id
        self._street_address = street_address
        self._city = city
        self._postal_code = postal_code
        self._province = province
        self._country = country

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Location.


        :return: The id of this Location.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.


        :param id: The id of this Location.
        :type id: int
        """

        self._id = id

    @property
    def street_address(self):
        """Gets the street_address of this Location.

        building number followed by street name  # noqa: E501

        :return: The street_address of this Location.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Location.

        building number followed by street name  # noqa: E501

        :param street_address: The street_address of this Location.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def city(self):
        """Gets the city of this Location.


        :return: The city of this Location.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Location.


        :param city: The city of this Location.
        :type city: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this Location.


        :return: The postal_code of this Location.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Location.


        :param postal_code: The postal_code of this Location.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def province(self):
        """Gets the province of this Location.


        :return: The province of this Location.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Location.


        :param province: The province of this Location.
        :type province: str
        """

        self._province = province

    @property
    def country(self):
        """Gets the country of this Location.


        :return: The country of this Location.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location.


        :param country: The country of this Location.
        :type country: str
        """

        self._country = country
