# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.election import Election
from openapi_server.models.election_results_all_of import ElectionResultsAllOf
from openapi_server.models.org import Org
from openapi_server.models.private_election_results import PrivateElectionResults
from openapi_server.models.question_results import QuestionResults
from openapi_server.models.vote import Vote
from openapi_server import util

from openapi_server.models.election import Election  # noqa: E501
from openapi_server.models.election_results_all_of import ElectionResultsAllOf  # noqa: E501
from openapi_server.models.org import Org  # noqa: E501
from openapi_server.models.private_election_results import PrivateElectionResults  # noqa: E501
from openapi_server.models.question_results import QuestionResults  # noqa: E501
from openapi_server.models.vote import Vote  # noqa: E501

class ElectionResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_results=None, user_votes=None, org_info=None, election_info=None):  # noqa: E501
        """ElectionResults - a model defined in OpenAPI

        :param question_results: The question_results of this ElectionResults.  # noqa: E501
        :type question_results: List[QuestionResults]
        :param user_votes: The user_votes of this ElectionResults.  # noqa: E501
        :type user_votes: List[Vote]
        :param org_info: The org_info of this ElectionResults.  # noqa: E501
        :type org_info: Org
        :param election_info: The election_info of this ElectionResults.  # noqa: E501
        :type election_info: Election
        """
        self.openapi_types = {
            'question_results': List[QuestionResults],
            'user_votes': List[Vote],
            'org_info': Org,
            'election_info': Election
        }

        self.attribute_map = {
            'question_results': 'question_results',
            'user_votes': 'user_votes',
            'org_info': 'org_info',
            'election_info': 'election_info'
        }

        self._question_results = question_results
        self._user_votes = user_votes
        self._org_info = org_info
        self._election_info = election_info

    @classmethod
    def from_dict(cls, dikt) -> 'ElectionResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The election_results of this ElectionResults.  # noqa: E501
        :rtype: ElectionResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_results(self):
        """Gets the question_results of this ElectionResults.

        The results for each question posed  # noqa: E501

        :return: The question_results of this ElectionResults.
        :rtype: List[QuestionResults]
        """
        return self._question_results

    @question_results.setter
    def question_results(self, question_results):
        """Sets the question_results of this ElectionResults.

        The results for each question posed  # noqa: E501

        :param question_results: The question_results of this ElectionResults.
        :type question_results: List[QuestionResults]
        """

        self._question_results = question_results

    @property
    def user_votes(self):
        """Gets the user_votes of this ElectionResults.

        The votes cast. Optional and dependant on whether the election was anonymous  # noqa: E501

        :return: The user_votes of this ElectionResults.
        :rtype: List[Vote]
        """
        return self._user_votes

    @user_votes.setter
    def user_votes(self, user_votes):
        """Sets the user_votes of this ElectionResults.

        The votes cast. Optional and dependant on whether the election was anonymous  # noqa: E501

        :param user_votes: The user_votes of this ElectionResults.
        :type user_votes: List[Vote]
        """

        self._user_votes = user_votes

    @property
    def org_info(self):
        """Gets the org_info of this ElectionResults.


        :return: The org_info of this ElectionResults.
        :rtype: Org
        """
        return self._org_info

    @org_info.setter
    def org_info(self, org_info):
        """Sets the org_info of this ElectionResults.


        :param org_info: The org_info of this ElectionResults.
        :type org_info: Org
        """

        self._org_info = org_info

    @property
    def election_info(self):
        """Gets the election_info of this ElectionResults.


        :return: The election_info of this ElectionResults.
        :rtype: Election
        """
        return self._election_info

    @election_info.setter
    def election_info(self, election_info):
        """Sets the election_info of this ElectionResults.


        :param election_info: The election_info of this ElectionResults.
        :type election_info: Election
        """

        self._election_info = election_info
