# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class OrgUserAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, privilege=None, user_org_id=None):  # noqa: E501
        """OrgUserAllOf - a model defined in OpenAPI

        :param privilege: The privilege of this OrgUserAllOf.  # noqa: E501
        :type privilege: int
        :param user_org_id: The user_org_id of this OrgUserAllOf.  # noqa: E501
        :type user_org_id: str
        """
        self.openapi_types = {
            'privilege': int,
            'user_org_id': str
        }

        self.attribute_map = {
            'privilege': 'privilege',
            'user_org_id': 'user_org_id'
        }

        self._privilege = privilege
        self._user_org_id = user_org_id

    @classmethod
    def from_dict(cls, dikt) -> 'OrgUserAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The org_user_allOf of this OrgUserAllOf.  # noqa: E501
        :rtype: OrgUserAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def privilege(self):
        """Gets the privilege of this OrgUserAllOf.

        The privilege level within the org  # noqa: E501

        :return: The privilege of this OrgUserAllOf.
        :rtype: int
        """
        return self._privilege

    @privilege.setter
    def privilege(self, privilege):
        """Sets the privilege of this OrgUserAllOf.

        The privilege level within the org  # noqa: E501

        :param privilege: The privilege of this OrgUserAllOf.
        :type privilege: int
        """

        self._privilege = privilege

    @property
    def user_org_id(self):
        """Gets the user_org_id of this OrgUserAllOf.

        The ID used by the user to identify himself within the org(Driver License, Passport, etc...)  # noqa: E501

        :return: The user_org_id of this OrgUserAllOf.
        :rtype: str
        """
        return self._user_org_id

    @user_org_id.setter
    def user_org_id(self, user_org_id):
        """Sets the user_org_id of this OrgUserAllOf.

        The ID used by the user to identify himself within the org(Driver License, Passport, etc...)  # noqa: E501

        :param user_org_id: The user_org_id of this OrgUserAllOf.
        :type user_org_id: str
        """

        self._user_org_id = user_org_id
